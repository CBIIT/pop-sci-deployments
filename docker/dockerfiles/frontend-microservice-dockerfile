FROM node:20.11.1-alpine3.19 as build

WORKDIR /usr/src/app

# Copy package.json and package-lock.json separately to leverage Docker cache
COPY package.json package-lock.json ./

# Install dependencies
RUN apk upgrade --update && apk --no-cache add git \
    && NODE_OPTIONS="--max-old-space-size=4096" npm install --legacy-peer-deps

# Copy the rest of the application code
COPY . .

# Build the application
RUN NODE_OPTIONS="--max-old-space-size=4096" npm run build

# Stage 2: Serve the application using nginx
FROM nginx:1.25.3-alpine3.18-slim

# Copy built application and configuration files from the build stage
COPY --from=build /usr/src/app/dist /usr/share/nginx/html
COPY --from=build /usr/src/app/conf/inject.template.js /usr/share/nginx/html/inject.template.js
COPY --from=build /usr/src/app/conf/nginx.conf /etc/nginx/conf.d/configfile.template
COPY --from=build /usr/src/app/conf/entrypoint.sh /

# Set environment variables
ENV PORT 80
ENV HOST 0.0.0.0

# Substitute the environment variable in the nginx configuration
RUN sh -c "envsubst '\$PORT' < /etc/nginx/conf.d/configfile.template > /etc/nginx/conf.d/default.conf"

# Expose the port and set entrypoint
EXPOSE 80
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["sh", "/entrypoint.sh"]
