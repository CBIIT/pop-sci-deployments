@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
    agent {
        node {
            label 'cicd_microservice'
        }
    }

    parameters {
        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev'
        )

        gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'main',
            name: 'FrontendBranch',
            type: 'GitParameterDefinition',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/crdc-popsci-ui'
        )

        booleanParam(
            defaultValue: true,
            name: 'UpdateDeploymentVersion'
        )

        booleanParam(
            defaultValue: true,
            name: 'RunDeployStage'
        )
    }

    options {
        ansiColor('xterm')
        timestamps()
    }

    environment {
        PROJECT = 'pop-sci'
        FRONTEND_TAG = "${params.FrontendBranch}"
        JOB_PATH = '_default/_lower/POPSCI/_jobs'
        CODE_REPO_URL = "https://github.com/CBIIT/crdc-popsci-ui"
        PLAYBOOK_REPO_URL = "https://github.com/CBIIT/pop-sci-deployments"
        PLAYBOOK_REPO_BRANCH = "main"
        BUILD_PLAYBOOK = "ansible/playbooks/build-frontend-microservice.yml"
        DEPLOY_PLAYBOOK = "ansible/playbooks/deploy-frontend-microservice.yml"
        INVENTORY = "ansible/playbooks/hosts"
        DEPLOYMENT_REPO_URL = "https://github.com/CBIIT/pop-sci-deployments"
        DEPLOYMENT_FILE = "pop-sci-deployments/deployments.yaml"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "${params.FrontendBranch}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "$crdc-popsci-ui"]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: "${env.CODE_REPO_URL}"]]
                ])

                checkout([$class: 'GitSCM',
                    branches: [[name: "${env.PLAYBOOK_REPO_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "playbooks"]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: "${env.PLAYBOOK_REPO_URL}"]]
                ])

                checkout([$class: 'GitSCM',
                    branches: [[name: "${params.Environment}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${env.PROJECT}-deployments"]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: "${env.DEPLOYMENT_REPO_URL}"]]
                ])
            }
        }

        stage('Build') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                    ansiblePlaybook(
                        playbook: "${WORKSPACE}/playbooks/${env.BUILD_PLAYBOOK}",
                        inventory: "${WORKSPACE}/playbooks/${env.INVENTORY}",
                        extras: [
                            project_name: "${env.PROJECT}",
                            subdomain: "popsci",
                            domain_name: "bento-tools.org",
                            service: "frontend"
                        ],
                        colorized: true
                    )
                }
            }
        }

        stage('Update Deployment Manifest') {
            steps {
                script {
                    if (params.UpdateDeploymentVersion) {
                        writeDeployment(
                            version: "${env.FRONTEND_TAG}.${BUILD_NUMBER}",
                            image: "${env.FRONTEND_TAG}.${BUILD_NUMBER}",
                            service: "frontend",
                            deploymentFile: "${env.PROJECT}-deployments/${env.DEPLOYMENT_FILE}",
                            deploymentRepoUrl: "${env.DEPLOYMENT_REPO_URL}",
                            deploymentCheckoutDirectory: "${env.PROJECT}-deployments"
                        )
                    }
                }
            }
        }

        stage('Update Code Tag') {
            steps {
                script {
                    tagRepo(
                        gitTag: "${params.FrontendBranch}",
                        gitUrl: "https://github.com/CBIIT/crdc-popsci-ui",
                        checkoutDirectory: "${env.PROJECT}-frontend"
                    )
                }
            }
        }

        stage('Deploy') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                    ansiblePlaybook(
                        playbook: "${WORKSPACE}/playbooks/${env.DEPLOY_PLAYBOOK}",
                        inventory: "${WORKSPACE}/playbooks/${env.INVENTORY}",
                        extras: [
                            project_name: "${env.PROJECT}",
                            subdomain: "popsci",
                            domain_name: "bento-tools.org",
                            service: "frontend"
                        ],
                        colorized: true
                    )
                }
            }
        }
    }

    post {
        always {
            notify(
                secretPath: "notification/slack",
                secretName: "bento_slack_url"
            )
        }

        cleanup {
            cleanWs()
        }
    }
}

