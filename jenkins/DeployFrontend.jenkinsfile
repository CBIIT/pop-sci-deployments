@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
    agent {
        node {
            label 'cicd_microservice'
        }
    }

    parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev'
        )

        string(
	        defaultValue: '',
		    description: 'The image tag to deploy',
		    name: 'ImageTag')

    }

    options {
        ansiColor('xterm')
        timestamps()
    }

    environment {
        PROJECT = 'popsci'
	    REPO_PROJECT='pop-sci'
        TIER = "${params.Environment}"
        FRONTEND_TAG = "${params.ImageTag}"
        FE_VERSION = "${params.ImageTag}"
        JOB_PATH = '_default/_lower/POPSCI/_jobs'
        CODE_REPO_URL = "https://github.com/CBIIT/crdc-popsci-ui"
        PLAYBOOK_REPO_URL = "https://github.com/CBIIT/pop-sci-deployments"
        PLAYBOOK_REPO_BRANCH = "main"
        BUILD_PLAYBOOK = "ansible/playbooks/build-frontend-microservice.yml"
        DEPLOY_PLAYBOOK = "ansible/playbooks/deploy-frontend-microservice.yml"
        INVENTORY = "ansible/playbooks/hosts"
        DEPLOYMENT_REPO_URL = "https://github.com/CBIIT/pop-sci-deployments"
        DEPLOYMENT_FILE = "deployments.yaml"
    }

    stages {
        stage('checkout'){
            steps {

		    checkout([$class: 'GitSCM',
			    branches: [[name: "${env.FRONTEND_TAG}"]],
			    doGenerateSubmoduleConfigurations: false,
			    extensions: [[$class: 'RelativeTargetDirectory',
			    relativeTargetDir: "crdc-popsci-ui"]],
			    submoduleCfg: [],
			    userRemoteConfigs:
			    [[url: "${env.CODE_REPO_URL}"]]])

  		    sh "cd crdc-popsci-ui && git submodule update --init --recursive"
		
		    checkout([$class: 'GitSCM',
			    branches: [[name: "${env.PLAYBOOK_REPO_BRANCH}"]],
			    doGenerateSubmoduleConfigurations: false,
			    extensions: [[$class: 'RelativeTargetDirectory',
			    relativeTargetDir: "playbooks"]],
			    submoduleCfg: [],
			    userRemoteConfigs:
			    [[url: "${env.PLAYBOOK_REPO_URL}"]]])

  		    checkout([$class: 'GitSCM',
			    branches: [[name: "${params.Environment}"]],
			    doGenerateSubmoduleConfigurations: false,
			    extensions: [[$class: 'RelativeTargetDirectory',
			    relativeTargetDir: "${env.REPO_PROJECT}-deployments"]],
			    submoduleCfg: [],
			    userRemoteConfigs:
			    [[url: "${env.DEPLOYMENT_REPO_URL}"]]])

            }
        }

        stage('Deploy') {
            steps {
                wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                    ansiblePlaybook(
                        playbook: "${WORKSPACE}/playbooks/${env.DEPLOY_PLAYBOOK}",
                        inventory: "${WORKSPACE}/playbooks/${env.INVENTORY}",
                        extraVars: [
                            tier: "${env.TIER}",
                            project_name: "${env.PROJECT}",
                            subdomain: "popsci",
                            domain_name: "bento-tools.org",
                            service_name: "frontend"
                        ],
                        colorized: true
                    )
                }
            }
        }
    }

    post {
        always {
            notify(
                secretPath: "notification/slack",
                secretName: "bento_slack_url"
            )
        }

        cleanup {
            cleanWs()
        }
    }
}
