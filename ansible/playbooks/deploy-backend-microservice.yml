- name: deploy backend microservice
  hosts: all
  connection: local
  gather_facts: no
  become: yes

  tasks:
    #install collections
    - name: install aws collection
      #command: ansible-galaxy collection install {{item}}
      shell: "ansible-galaxy collection install {{ item | quote }} --force"
      loop:
        - community.docker:<=3.4.3
        - amazon.aws:<=5.4.0
        - community.aws:<=3.2.0
        #- git+https://github.com/CBIIT/datacommons-devops.git#/ansible/collections/bento/common/,popsi-build
        - git+https://github.com/CBIIT/datacommons-devops.git#/ansible/collections/bento/common/,v1.19

    #docker login
    - name: docker login
      include_role:
        name: bento.common.ecr_login
      vars:
        region: us-east-1


    #deploy backend
    - name: deploy stage for backend microservice
      include_role:
        name: bento.common.ecs
      vars:
        ansible_python_interpreter: /usr/bin/python3
        project_name: "{{project_name}}"
        service_name: "{{ program }}-{{ tier }}-{{ project_name }}-backend"
        iam_prefix: "power-user"
        program: "crdc"
        platform: aws
        region: us-east-1
        container_name: "backend"
        auth_enabled: "true"
        image_version: "{{ lookup('env','BE_VERSION') }}"
        tier: "{{ lookup('env','TIER') }}"
        central_ecr_repo: "{{ lookup('env','REGISTRY_URL') }}"
        execution_role: "{% if iam_prefix is defined and iam_prefix != '' %}{{ iam_prefix }}-{{ program }}-{{ tier }}-{{ project_name }}-ecs-task-execution-role{% else %}{{ program }}-{{ tier }}-{{ project_name }}-task-execution-role{% endif %}"
        task_role: "{% if iam_prefix is defined and iam_prefix != '' %}{{ iam_prefix }}-{{ program }}-{{ tier }}-{{ project_name }}-ecs-task-role{% else %}{{ program }}-{{ tier }}-{{ project_name }}-task-role{% endif %}"
        ecs_cluster_name: "{{ program }}-{{ tier }}-{{ project_name }}-ecs"
        #neo4j_user: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.neo4j_user', nested=true, region='us-east-1' ) }}"
        #neo4j_ip: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.neo4j_ip', nested=true, region='us-east-1' ) }}"
        #neo4j_password: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.neo4j_password', nested=true, region='us-east-1' ) }}"
        newrelic_license_key: "{{ lookup('amazon.aws.aws_secret', 'monitoring/newrelic.api_key', nested=true, region='us-east-1' ) }}"
        sumo_collector_endpoint: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.sumo_collector_endpoint', nested=true, region='us-east-1' ) }}"
        sumo_collector_token: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.sumo_collector_token_backend', nested=true, region='us-east-1' ) }}"
        container_port: 8080
        container_memory: 2048
        container_cpu: 1024
        container_image_url: "{{ central_ecr_repo }}/{{ program }}-{{ project_name }}-{{ container_name }}"
        #Elasticsearch
        es_host: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.es_host', nested=true, region='us-east-1' ) }}"
        es_schema: "{% if project_name == 'bento' %}es-schema.graphql{% else %}es-schema-{{ project_name }}.graphql{% endif %}"
        enable_es_filter: "true"
        #Cloudfront & s3
        #s3_access_key_id: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.s3_access_key_id', nested=true, region='us-east-1') }}"
        #s3_secret_access_key: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.s3_secret_access_key', nested=true, region='us-east-1') }}"
        #file_manifest_bucket_name: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.file_manifest_bucket_name', nested=true, region='us-east-1') }}"
        #cloudfront_key_pair_id: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.cloudfront_key_pair_id', nested=true, region='us-east-1') }}"
        #cloudfront_private_key: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.cloudfront_private_key', nested=true, region='us-east-1') | b64decode }}"
        #cloudfront_domain: "{{ lookup('amazon.aws.aws_secret', 'bento/{{ project_name }}/{{ tier }}.cloudfront_domain', nested=true, region='us-east-1') }}"
        ##############################################################################################################################################################################
        #Redis vars
        #enable_redis: "false"
        #redis_port: "6379"
        #use_cluster: "true"
        #redis_host: localhost
        #Entrypoint
        container_entrypoint:
          - "/bin/sh"
          - "-c"
          - 'wget "https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip" -O newrelic-java.zip && rm -rf newrelic && unzip -o newrelic-java.zip && bin/catalina.sh run'
        #Environment
        container_env:
          #- name: NEO4J_URL
           # value: "bolt://{{ neo4j_ip }}:7687"
         # - name: NEO4J_USER
           # value: "{{ neo4j_user }}"
         # - name: NEO4J_PASSWORD
          #  value: "{{ neo4j_password }}"
          - name: BENTO_API_VERSION
            value: "{{ image_version }}"
          - name: AUTH_ENDPOINT
            value: "{% if tier == 'prod'  and project_name == 'bento' %}https://{{domain_name}}/api/auth{% elif tier == 'prod' %}https://{{subdomain}}.{{domain_name}}/api/auth{% else %}https://{{subdomain}}-{{tier}}.{{domain_name}}/api/auth{% endif %}"
          - name: ES_HOST
            value: "{{ es_host }}"
          - name: NEW_RELIC_LICENSE_KEY
            value: "{{ newrelic_license_key }}"
          - name: NEW_RELIC_APP_NAME
            value: "{{ project_name }}-{{ platform }}-{{ tier }}-{{ container_name }}"
          - name: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
            value: "true"
          - name: NEW_RELIC_HOST
            value: "gov-collector.newrelic.com"
          - name: NEW_RELIC_LOG_FILE_NAME
            value: "STDOUT"
          - name: NEW_RELIC_LABELS
            value: "Project:{{ project_name }};Environment:{{ tier }}"
          - name: JAVA_OPTS
            value: "-javaagent:/usr/local/tomcat/newrelic/newrelic.jar"
       ## Clodfront & s3
          - name: S3_ACCESS_KEY_ID
            value: "{{ s3_access_key_id }}"
          - name: S3_SECRET_ACCESS_KEY
            value: "{{ s3_secret_access_key }}"
          - name: FILE_MANIFEST_BUCKET_NAME
            value: "{{ file_manifest_bucket_name }}"
          - name: CLOUDFRONT_KEY_PAIR_ID
            value: "{{ cloudfront_key_pair_id }}"
          - name: CLOUDFRONT_PRIVATE_KEY
            value: "{{ cloudfront_private_key }}"
          - name: CLOUDFRONT_DOMAIN
            value: "https://{{ cloudfront_domain }}"
          - name: SIGNED_URL_EXPIRY_SECONDS
            value: "86400"
          - name: AWS_REGION
            value: "us-east-1"
         # - name: REDIS_ENABLE
          #  value: "{{ enable_redis }}"
         # - name: REDIS_USE_CLUSTER
          #  value: "{{ use_cluster }}"
         # - name: REDIS_HOST
          #  value: "{{ redis_host }}"
         # - name: REDIS_PORT
          #  value: "{{ redis_port }}"
         # - name: REDIS_FILTER_ENABLE
           # value: "false"
